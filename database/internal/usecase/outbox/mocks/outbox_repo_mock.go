// Code generated by MockGen. DO NOT EDIT.
// Source: ./internal/usecase/outbox/outbox.go
//
// Generated by this command:
//
//	mockgen -source=./internal/usecase/outbox/outbox.go -destination=./internal/usecase/outbox/mocks/outbox_repo_mock.go -package=mocks
//

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"
	time "time"

	repository "github.com/project/library/internal/usecase/repository"
	gomock "go.uber.org/mock/gomock"
)

// MockRepository is a mock of Repository interface.
type MockRepository struct {
	ctrl     *gomock.Controller
	recorder *MockRepositoryMockRecorder
	isgomock struct{}
}

// MockRepositoryMockRecorder is the mock recorder for MockRepository.
type MockRepositoryMockRecorder struct {
	mock *MockRepository
}

// NewMockRepository creates a new mock instance.
func NewMockRepository(ctrl *gomock.Controller) *MockRepository {
	mock := &MockRepository{ctrl: ctrl}
	mock.recorder = &MockRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRepository) EXPECT() *MockRepositoryMockRecorder {
	return m.recorder
}

// GetMessages mocks base method.
func (m *MockRepository) GetMessages(ctx context.Context, batchSize int, inProgressTTL time.Duration) ([]repository.OutboxData, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMessages", ctx, batchSize, inProgressTTL)
	ret0, _ := ret[0].([]repository.OutboxData)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetMessages indicates an expected call of GetMessages.
func (mr *MockRepositoryMockRecorder) GetMessages(ctx, batchSize, inProgressTTL any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMessages", reflect.TypeOf((*MockRepository)(nil).GetMessages), ctx, batchSize, inProgressTTL)
}

// MarkAs mocks base method.
func (m *MockRepository) MarkAs(ctx context.Context, idempotencyKeys []string, s repository.Status) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MarkAs", ctx, idempotencyKeys, s)
	ret0, _ := ret[0].(error)
	return ret0
}

// MarkAs indicates an expected call of MarkAs.
func (mr *MockRepositoryMockRecorder) MarkAs(ctx, idempotencyKeys, s any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MarkAs", reflect.TypeOf((*MockRepository)(nil).MarkAs), ctx, idempotencyKeys, s)
}

// SendMessage mocks base method.
func (m *MockRepository) SendMessage(ctx context.Context, idempotencyKey string, kind repository.OutboxKind, message []byte) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendMessage", ctx, idempotencyKey, kind, message)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendMessage indicates an expected call of SendMessage.
func (mr *MockRepositoryMockRecorder) SendMessage(ctx, idempotencyKey, kind, message any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendMessage", reflect.TypeOf((*MockRepository)(nil).SendMessage), ctx, idempotencyKey, kind, message)
}

// MockTransactor is a mock of Transactor interface.
type MockTransactor struct {
	ctrl     *gomock.Controller
	recorder *MockTransactorMockRecorder
	isgomock struct{}
}

// MockTransactorMockRecorder is the mock recorder for MockTransactor.
type MockTransactorMockRecorder struct {
	mock *MockTransactor
}

// NewMockTransactor creates a new mock instance.
func NewMockTransactor(ctrl *gomock.Controller) *MockTransactor {
	mock := &MockTransactor{ctrl: ctrl}
	mock.recorder = &MockTransactorMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTransactor) EXPECT() *MockTransactorMockRecorder {
	return m.recorder
}

// WithTx mocks base method.
func (m *MockTransactor) WithTx(ctx context.Context, function func(context.Context) error) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WithTx", ctx, function)
	ret0, _ := ret[0].(error)
	return ret0
}

// WithTx indicates an expected call of WithTx.
func (mr *MockTransactorMockRecorder) WithTx(ctx, function any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WithTx", reflect.TypeOf((*MockTransactor)(nil).WithTx), ctx, function)
}

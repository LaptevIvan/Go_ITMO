// Code generated by MockGen. DO NOT EDIT.
// Source: ./internal/usecase/library/usecases.go
//
// Generated by this command:
//
//	mockgen -source=./internal/usecase/library/usecases.go -destination=./internal/usecase/library/mocks/repository_mock.go -package=mocks
//

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"
	time "time"

	entity "github.com/project/library/internal/entity"
	repository "github.com/project/library/internal/usecase/repository"
	gomock "go.uber.org/mock/gomock"
)

// MockAuthorRepository is a mock of AuthorRepository interface.
type MockAuthorRepository struct {
	ctrl     *gomock.Controller
	recorder *MockAuthorRepositoryMockRecorder
	isgomock struct{}
}

// MockAuthorRepositoryMockRecorder is the mock recorder for MockAuthorRepository.
type MockAuthorRepositoryMockRecorder struct {
	mock *MockAuthorRepository
}

// NewMockAuthorRepository creates a new mock instance.
func NewMockAuthorRepository(ctrl *gomock.Controller) *MockAuthorRepository {
	mock := &MockAuthorRepository{ctrl: ctrl}
	mock.recorder = &MockAuthorRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAuthorRepository) EXPECT() *MockAuthorRepositoryMockRecorder {
	return m.recorder
}

// ChangeAuthorInfo mocks base method.
func (m *MockAuthorRepository) ChangeAuthorInfo(ctx context.Context, updAuthor entity.Author) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ChangeAuthorInfo", ctx, updAuthor)
	ret0, _ := ret[0].(error)
	return ret0
}

// ChangeAuthorInfo indicates an expected call of ChangeAuthorInfo.
func (mr *MockAuthorRepositoryMockRecorder) ChangeAuthorInfo(ctx, updAuthor any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ChangeAuthorInfo", reflect.TypeOf((*MockAuthorRepository)(nil).ChangeAuthorInfo), ctx, updAuthor)
}

// GetAuthorInfo mocks base method.
func (m *MockAuthorRepository) GetAuthorInfo(ctx context.Context, idAuthor string) (entity.Author, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAuthorInfo", ctx, idAuthor)
	ret0, _ := ret[0].(entity.Author)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAuthorInfo indicates an expected call of GetAuthorInfo.
func (mr *MockAuthorRepositoryMockRecorder) GetAuthorInfo(ctx, idAuthor any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAuthorInfo", reflect.TypeOf((*MockAuthorRepository)(nil).GetAuthorInfo), ctx, idAuthor)
}

// RegisterAuthor mocks base method.
func (m *MockAuthorRepository) RegisterAuthor(ctx context.Context, author entity.Author) (entity.Author, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RegisterAuthor", ctx, author)
	ret0, _ := ret[0].(entity.Author)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RegisterAuthor indicates an expected call of RegisterAuthor.
func (mr *MockAuthorRepositoryMockRecorder) RegisterAuthor(ctx, author any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RegisterAuthor", reflect.TypeOf((*MockAuthorRepository)(nil).RegisterAuthor), ctx, author)
}

// MockBooksRepository is a mock of BooksRepository interface.
type MockBooksRepository struct {
	ctrl     *gomock.Controller
	recorder *MockBooksRepositoryMockRecorder
	isgomock struct{}
}

// MockBooksRepositoryMockRecorder is the mock recorder for MockBooksRepository.
type MockBooksRepositoryMockRecorder struct {
	mock *MockBooksRepository
}

// NewMockBooksRepository creates a new mock instance.
func NewMockBooksRepository(ctrl *gomock.Controller) *MockBooksRepository {
	mock := &MockBooksRepository{ctrl: ctrl}
	mock.recorder = &MockBooksRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockBooksRepository) EXPECT() *MockBooksRepositoryMockRecorder {
	return m.recorder
}

// AddBook mocks base method.
func (m *MockBooksRepository) AddBook(ctx context.Context, book entity.Book) (entity.Book, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddBook", ctx, book)
	ret0, _ := ret[0].(entity.Book)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AddBook indicates an expected call of AddBook.
func (mr *MockBooksRepositoryMockRecorder) AddBook(ctx, book any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddBook", reflect.TypeOf((*MockBooksRepository)(nil).AddBook), ctx, book)
}

// GetAuthorBooks mocks base method.
func (m *MockBooksRepository) GetAuthorBooks(ctx context.Context, idAuthor string) (<-chan entity.Book, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAuthorBooks", ctx, idAuthor)
	ret0, _ := ret[0].(<-chan entity.Book)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAuthorBooks indicates an expected call of GetAuthorBooks.
func (mr *MockBooksRepositoryMockRecorder) GetAuthorBooks(ctx, idAuthor any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAuthorBooks", reflect.TypeOf((*MockBooksRepository)(nil).GetAuthorBooks), ctx, idAuthor)
}

// GetBook mocks base method.
func (m *MockBooksRepository) GetBook(ctx context.Context, idBook string) (entity.Book, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBook", ctx, idBook)
	ret0, _ := ret[0].(entity.Book)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetBook indicates an expected call of GetBook.
func (mr *MockBooksRepositoryMockRecorder) GetBook(ctx, idBook any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBook", reflect.TypeOf((*MockBooksRepository)(nil).GetBook), ctx, idBook)
}

// UpdateBook mocks base method.
func (m *MockBooksRepository) UpdateBook(ctx context.Context, updBook entity.Book) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateBook", ctx, updBook)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateBook indicates an expected call of UpdateBook.
func (mr *MockBooksRepositoryMockRecorder) UpdateBook(ctx, updBook any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateBook", reflect.TypeOf((*MockBooksRepository)(nil).UpdateBook), ctx, updBook)
}

// MockOutboxRepository is a mock of OutboxRepository interface.
type MockOutboxRepository struct {
	ctrl     *gomock.Controller
	recorder *MockOutboxRepositoryMockRecorder
	isgomock struct{}
}

// MockOutboxRepositoryMockRecorder is the mock recorder for MockOutboxRepository.
type MockOutboxRepositoryMockRecorder struct {
	mock *MockOutboxRepository
}

// NewMockOutboxRepository creates a new mock instance.
func NewMockOutboxRepository(ctrl *gomock.Controller) *MockOutboxRepository {
	mock := &MockOutboxRepository{ctrl: ctrl}
	mock.recorder = &MockOutboxRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockOutboxRepository) EXPECT() *MockOutboxRepositoryMockRecorder {
	return m.recorder
}

// GetMessages mocks base method.
func (m *MockOutboxRepository) GetMessages(ctx context.Context, batchSize int, inProgressTTL time.Duration) ([]repository.OutboxData, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMessages", ctx, batchSize, inProgressTTL)
	ret0, _ := ret[0].([]repository.OutboxData)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetMessages indicates an expected call of GetMessages.
func (mr *MockOutboxRepositoryMockRecorder) GetMessages(ctx, batchSize, inProgressTTL any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMessages", reflect.TypeOf((*MockOutboxRepository)(nil).GetMessages), ctx, batchSize, inProgressTTL)
}

// MarkAs mocks base method.
func (m *MockOutboxRepository) MarkAs(ctx context.Context, idempotencyKeys []string, s repository.Status) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MarkAs", ctx, idempotencyKeys, s)
	ret0, _ := ret[0].(error)
	return ret0
}

// MarkAs indicates an expected call of MarkAs.
func (mr *MockOutboxRepositoryMockRecorder) MarkAs(ctx, idempotencyKeys, s any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MarkAs", reflect.TypeOf((*MockOutboxRepository)(nil).MarkAs), ctx, idempotencyKeys, s)
}

// SendMessage mocks base method.
func (m *MockOutboxRepository) SendMessage(ctx context.Context, idempotencyKey string, kind repository.OutboxKind, message []byte) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendMessage", ctx, idempotencyKey, kind, message)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendMessage indicates an expected call of SendMessage.
func (mr *MockOutboxRepositoryMockRecorder) SendMessage(ctx, idempotencyKey, kind, message any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendMessage", reflect.TypeOf((*MockOutboxRepository)(nil).SendMessage), ctx, idempotencyKey, kind, message)
}

// MockTransactor is a mock of Transactor interface.
type MockTransactor struct {
	ctrl     *gomock.Controller
	recorder *MockTransactorMockRecorder
	isgomock struct{}
}

// MockTransactorMockRecorder is the mock recorder for MockTransactor.
type MockTransactorMockRecorder struct {
	mock *MockTransactor
}

// NewMockTransactor creates a new mock instance.
func NewMockTransactor(ctrl *gomock.Controller) *MockTransactor {
	mock := &MockTransactor{ctrl: ctrl}
	mock.recorder = &MockTransactorMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTransactor) EXPECT() *MockTransactorMockRecorder {
	return m.recorder
}

// WithTx mocks base method.
func (m *MockTransactor) WithTx(ctx context.Context, function func(context.Context) error) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WithTx", ctx, function)
	ret0, _ := ret[0].(error)
	return ret0
}

// WithTx indicates an expected call of WithTx.
func (mr *MockTransactorMockRecorder) WithTx(ctx, function any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WithTx", reflect.TypeOf((*MockTransactor)(nil).WithTx), ctx, function)
}

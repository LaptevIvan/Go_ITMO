// Code generated by MockGen. DO NOT EDIT.
// Source: ./internal/controller/service.go
//
// Generated by this command:
//
//	mockgen -source=./internal/controller/service.go -destination=./internal/controller/mocks/usecase_mock.go -package=mocks
//

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	library "github.com/project/library/generated/api/library"
	gomock "go.uber.org/mock/gomock"
)

// MockAuthorUseCase is a mock of AuthorUseCase interface.
type MockAuthorUseCase struct {
	ctrl     *gomock.Controller
	recorder *MockAuthorUseCaseMockRecorder
	isgomock struct{}
}

// MockAuthorUseCaseMockRecorder is the mock recorder for MockAuthorUseCase.
type MockAuthorUseCaseMockRecorder struct {
	mock *MockAuthorUseCase
}

// NewMockAuthorUseCase creates a new mock instance.
func NewMockAuthorUseCase(ctrl *gomock.Controller) *MockAuthorUseCase {
	mock := &MockAuthorUseCase{ctrl: ctrl}
	mock.recorder = &MockAuthorUseCaseMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAuthorUseCase) EXPECT() *MockAuthorUseCaseMockRecorder {
	return m.recorder
}

// ChangeAuthorInfo mocks base method.
func (m *MockAuthorUseCase) ChangeAuthorInfo(ctx context.Context, idAuthor, newName string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ChangeAuthorInfo", ctx, idAuthor, newName)
	ret0, _ := ret[0].(error)
	return ret0
}

// ChangeAuthorInfo indicates an expected call of ChangeAuthorInfo.
func (mr *MockAuthorUseCaseMockRecorder) ChangeAuthorInfo(ctx, idAuthor, newName any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ChangeAuthorInfo", reflect.TypeOf((*MockAuthorUseCase)(nil).ChangeAuthorInfo), ctx, idAuthor, newName)
}

// GetAuthorInfo mocks base method.
func (m *MockAuthorUseCase) GetAuthorInfo(ctx context.Context, idAuthor string) (*library.GetAuthorInfoResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAuthorInfo", ctx, idAuthor)
	ret0, _ := ret[0].(*library.GetAuthorInfoResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAuthorInfo indicates an expected call of GetAuthorInfo.
func (mr *MockAuthorUseCaseMockRecorder) GetAuthorInfo(ctx, idAuthor any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAuthorInfo", reflect.TypeOf((*MockAuthorUseCase)(nil).GetAuthorInfo), ctx, idAuthor)
}

// RegisterAuthor mocks base method.
func (m *MockAuthorUseCase) RegisterAuthor(ctx context.Context, authorName string) (*library.RegisterAuthorResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RegisterAuthor", ctx, authorName)
	ret0, _ := ret[0].(*library.RegisterAuthorResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RegisterAuthor indicates an expected call of RegisterAuthor.
func (mr *MockAuthorUseCaseMockRecorder) RegisterAuthor(ctx, authorName any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RegisterAuthor", reflect.TypeOf((*MockAuthorUseCase)(nil).RegisterAuthor), ctx, authorName)
}

// MockBooksUseCase is a mock of BooksUseCase interface.
type MockBooksUseCase struct {
	ctrl     *gomock.Controller
	recorder *MockBooksUseCaseMockRecorder
	isgomock struct{}
}

// MockBooksUseCaseMockRecorder is the mock recorder for MockBooksUseCase.
type MockBooksUseCaseMockRecorder struct {
	mock *MockBooksUseCase
}

// NewMockBooksUseCase creates a new mock instance.
func NewMockBooksUseCase(ctrl *gomock.Controller) *MockBooksUseCase {
	mock := &MockBooksUseCase{ctrl: ctrl}
	mock.recorder = &MockBooksUseCaseMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockBooksUseCase) EXPECT() *MockBooksUseCaseMockRecorder {
	return m.recorder
}

// AddBook mocks base method.
func (m *MockBooksUseCase) AddBook(ctx context.Context, name string, authorIDs []string) (*library.AddBookResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddBook", ctx, name, authorIDs)
	ret0, _ := ret[0].(*library.AddBookResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AddBook indicates an expected call of AddBook.
func (mr *MockBooksUseCaseMockRecorder) AddBook(ctx, name, authorIDs any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddBook", reflect.TypeOf((*MockBooksUseCase)(nil).AddBook), ctx, name, authorIDs)
}

// GetAuthorBooks mocks base method.
func (m *MockBooksUseCase) GetAuthorBooks(ctx context.Context, idAuthor string) (<-chan *library.Book, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAuthorBooks", ctx, idAuthor)
	ret0, _ := ret[0].(<-chan *library.Book)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAuthorBooks indicates an expected call of GetAuthorBooks.
func (mr *MockBooksUseCaseMockRecorder) GetAuthorBooks(ctx, idAuthor any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAuthorBooks", reflect.TypeOf((*MockBooksUseCase)(nil).GetAuthorBooks), ctx, idAuthor)
}

// GetBookInfo mocks base method.
func (m *MockBooksUseCase) GetBookInfo(ctx context.Context, bookID string) (*library.GetBookInfoResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBookInfo", ctx, bookID)
	ret0, _ := ret[0].(*library.GetBookInfoResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetBookInfo indicates an expected call of GetBookInfo.
func (mr *MockBooksUseCaseMockRecorder) GetBookInfo(ctx, bookID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBookInfo", reflect.TypeOf((*MockBooksUseCase)(nil).GetBookInfo), ctx, bookID)
}

// UpdateBook mocks base method.
func (m *MockBooksUseCase) UpdateBook(ctx context.Context, id, newName string, newAuthorIDs []string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateBook", ctx, id, newName, newAuthorIDs)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateBook indicates an expected call of UpdateBook.
func (mr *MockBooksUseCaseMockRecorder) UpdateBook(ctx, id, newName, newAuthorIDs any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateBook", reflect.TypeOf((*MockBooksUseCase)(nil).UpdateBook), ctx, id, newName, newAuthorIDs)
}

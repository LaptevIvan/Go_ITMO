// Code generated by MockGen. DO NOT EDIT.
// Source: ./generated/api/library/library_grpc.pb.go
//
// Generated by this command:
//
//	mockgen -source=./generated/api/library/library_grpc.pb.go -destination=./internal/controller/mocks/get_author_books_server_mock.go -package=mocks -exclude_interfaces=LibraryClient,libraryClient,Library_GetAuthorBooksClient,LibraryServer,UnsafeLibraryServer
//

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	library "github.com/project/library/generated/api/library"
	gomock "go.uber.org/mock/gomock"
	metadata "google.golang.org/grpc/metadata"
)

// MockLibrary_GetAuthorBooksServer is a mock of Library_GetAuthorBooksServer interface.
type MockLibrary_GetAuthorBooksServer struct {
	ctrl     *gomock.Controller
	recorder *MockLibrary_GetAuthorBooksServerMockRecorder
	isgomock struct{}
}

// MockLibrary_GetAuthorBooksServerMockRecorder is the mock recorder for MockLibrary_GetAuthorBooksServer.
type MockLibrary_GetAuthorBooksServerMockRecorder struct {
	mock *MockLibrary_GetAuthorBooksServer
}

// NewMockLibrary_GetAuthorBooksServer creates a new mock instance.
func NewMockLibrary_GetAuthorBooksServer(ctrl *gomock.Controller) *MockLibrary_GetAuthorBooksServer {
	mock := &MockLibrary_GetAuthorBooksServer{ctrl: ctrl}
	mock.recorder = &MockLibrary_GetAuthorBooksServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockLibrary_GetAuthorBooksServer) EXPECT() *MockLibrary_GetAuthorBooksServerMockRecorder {
	return m.recorder
}

// Context mocks base method.
func (m *MockLibrary_GetAuthorBooksServer) Context() context.Context {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Context")
	ret0, _ := ret[0].(context.Context)
	return ret0
}

// Context indicates an expected call of Context.
func (mr *MockLibrary_GetAuthorBooksServerMockRecorder) Context() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Context", reflect.TypeOf((*MockLibrary_GetAuthorBooksServer)(nil).Context))
}

// RecvMsg mocks base method.
func (m_2 *MockLibrary_GetAuthorBooksServer) RecvMsg(m any) error {
	m_2.ctrl.T.Helper()
	ret := m_2.ctrl.Call(m_2, "RecvMsg", m)
	ret0, _ := ret[0].(error)
	return ret0
}

// RecvMsg indicates an expected call of RecvMsg.
func (mr *MockLibrary_GetAuthorBooksServerMockRecorder) RecvMsg(m any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RecvMsg", reflect.TypeOf((*MockLibrary_GetAuthorBooksServer)(nil).RecvMsg), m)
}

// Send mocks base method.
func (m *MockLibrary_GetAuthorBooksServer) Send(arg0 *library.Book) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Send", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Send indicates an expected call of Send.
func (mr *MockLibrary_GetAuthorBooksServerMockRecorder) Send(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Send", reflect.TypeOf((*MockLibrary_GetAuthorBooksServer)(nil).Send), arg0)
}

// SendHeader mocks base method.
func (m *MockLibrary_GetAuthorBooksServer) SendHeader(arg0 metadata.MD) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendHeader", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendHeader indicates an expected call of SendHeader.
func (mr *MockLibrary_GetAuthorBooksServerMockRecorder) SendHeader(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendHeader", reflect.TypeOf((*MockLibrary_GetAuthorBooksServer)(nil).SendHeader), arg0)
}

// SendMsg mocks base method.
func (m_2 *MockLibrary_GetAuthorBooksServer) SendMsg(m any) error {
	m_2.ctrl.T.Helper()
	ret := m_2.ctrl.Call(m_2, "SendMsg", m)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendMsg indicates an expected call of SendMsg.
func (mr *MockLibrary_GetAuthorBooksServerMockRecorder) SendMsg(m any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendMsg", reflect.TypeOf((*MockLibrary_GetAuthorBooksServer)(nil).SendMsg), m)
}

// SetHeader mocks base method.
func (m *MockLibrary_GetAuthorBooksServer) SetHeader(arg0 metadata.MD) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetHeader", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetHeader indicates an expected call of SetHeader.
func (mr *MockLibrary_GetAuthorBooksServerMockRecorder) SetHeader(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetHeader", reflect.TypeOf((*MockLibrary_GetAuthorBooksServer)(nil).SetHeader), arg0)
}

// SetTrailer mocks base method.
func (m *MockLibrary_GetAuthorBooksServer) SetTrailer(arg0 metadata.MD) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetTrailer", arg0)
}

// SetTrailer indicates an expected call of SetTrailer.
func (mr *MockLibrary_GetAuthorBooksServerMockRecorder) SetTrailer(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetTrailer", reflect.TypeOf((*MockLibrary_GetAuthorBooksServer)(nil).SetTrailer), arg0)
}
